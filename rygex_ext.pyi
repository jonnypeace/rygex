# regex.pyi
from typing import List, Optional, Any, Iterable, Iterator, Sequence, TypeVar

class Regex:
    def __init__(self, pattern: str) -> None: ...
    def search(self, text: str) -> Optional["Match"]: ...

class Match:
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    @property
    def group(self) -> str: ...

def compile(pattern: str) -> Regex: ...
def search(pattern: str, text: str) -> Optional[Match]: ...
def findall_captures_str(pattern: str, text: str) -> List[List[Optional[str]]]: ...
def findall_captures_named_str(pattern: str, text: str) -> List[Any]: ...
def findall_captures_list_parallel(pattern: str, texts: List[str]) -> List[List[List[Optional[str]]]]: ...
def findall_captures_list(pattern: str, texts: List[str]) -> List[List[List[Optional[str]]]]: ...
def findall_captures_named_list_parallel(pattern: str, texts: List[str]) -> List[List[Any]]: ...
def find_joined_matches_in_file(pattern: str, file_path: str, groups: list[int]) -> list[str]: ...
def find_joined_matches_in_file_by_line_parallel(pattern: str, file_path: str, groups: list[int]) -> list[str]: ...
def find_joined_matches_in_file_by_line_bytes_parallel(pattern: str, file_path: str, groups: list[int]) -> list[str]: ...
def find_joined_matches_in_file_by_line_bytes(pattern: str, file_path: str, groups: list[int]) -> list[str]: ...
def extract_fixed_spans(file_path: str, start_delim: str, start_index: Optional[int], end_delim: Optional[str], end_index: Optional[int],
                        omit_first: Optional[int], omit_last: Optional[int], print_line_on_match: bool, case_insensitive: bool) -> list[str]: ...
def count_string_occurrences(items: list[str]) -> list[tuple[str, int]]: ...
def extract_fixed_spans_parallel(file_path: str, start_delim: str, start_index: Optional[int], end_delim: Optional[str], end_index: Optional[int],
                                 omit_first: Optional[int], omit_last: Optional[int], print_line_on_match: bool, case_insensitive: bool) -> list[str]: ...
def extract_fixed_lines(file_path: str, pattern: str, case_insensitive: bool) -> list[str]: ...
def extract_fixed_lines_parallel(file_path: str, pattern: str, case_insensitive: bool) -> list[str]: ...
def total_count(pattern: str, file_path: str, parallel: bool) -> list[str]: ...
def total_count_fixed_str(pattern: str, file_path: str, parallel: bool, case_insensitive: bool) -> list[str]: ...


class RustRegexGen:
    """
    RustRegexGen(pattern: str, iterable_of_strings: Iterable[str])

    A generator that yields one match (as a list of Optional[str]) at a time,
    across all input strings. Index 0 is the full match; index 1.. are capture groups.
    """

    def __init__(self, pattern: str, iterable_of_strings: Iterable[str]) -> None: ...
    def __iter__(self) -> Iterator[List[Optional[str]]]: ...
    def __next__(self) -> List[Optional[str]]: ...


class FileRegexGen(Iterator[str]):
    """
    FileRegexGen(pattern: str, filename: str) -> FileRegexGen

    Memory‐maps `filename` and yields exactly the group-1 capture (as `str`)
    for each match of `pattern`.  Raises StopIteration when done.
    """

    def __init__(self, pattern: str, filename: str) -> None: ...
    def __iter__(self) -> FileRegexGen: ...
    def __next__(self) -> str: ...

def from_file_range(pattern: str, filename: str, start: int, end: int) -> FileRegexGen: ...
